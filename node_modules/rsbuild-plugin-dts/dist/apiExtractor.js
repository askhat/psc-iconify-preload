import * as __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__ from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE__rsbuild_core_1b356efc__ from "@rsbuild/core";
import * as __WEBPACK_EXTERNAL_MODULE_picocolors__ from "picocolors";
import * as __WEBPACK_EXTERNAL_MODULE__utils_js_d88b7fe1__ from "./utils.js";
const logPrefixApiExtractor = __WEBPACK_EXTERNAL_MODULE_picocolors__["default"].dim('[api-extractor]');
async function bundleDts(options) {
    let apiExtractor;
    try {
        apiExtractor = await import("@microsoft/api-extractor");
    } catch  {
        throw new Error(`${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].cyan('@microsoft/api-extractor')} is required when ${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].cyan('dts.bundle')} is set to ${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].cyan('true')}, please make sure it is installed. You could check https://rslib.rs/guide/advanced/dts#how-to-generate-declaration-files-in-rslib for more details.`);
    }
    const { Extractor, ExtractorConfig, ExtractorLogLevel } = apiExtractor;
    const { name, cwd, distPath, dtsExtension, banner, footer, dtsEntry, tsconfigPath = 'tsconfig.json', bundledPackages = [] } = options;
    try {
        await Promise.all(dtsEntry.map(async (entry)=>{
            const start = Date.now();
            const untrimmedFilePath = (0, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.join)(cwd, (0, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.relative)(cwd, distPath), `${entry.name}${dtsExtension}`);
            const mainEntryPointFilePath = entry.path.replace(/\?.*$/, '');
            const internalConfig = {
                mainEntryPointFilePath,
                bundledPackages,
                dtsRollup: {
                    enabled: true,
                    untrimmedFilePath
                },
                compiler: {
                    tsconfigFilePath: tsconfigPath
                },
                projectFolder: cwd
            };
            const extractorConfig = ExtractorConfig.prepare({
                configObject: internalConfig,
                configObjectFullPath: void 0,
                packageJsonFullPath: (0, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.join)(cwd, 'package.json')
            });
            const extractorResult = Extractor.invoke(extractorConfig, {
                localBuild: true,
                messageCallback (message) {
                    if ('console-compiler-version-notice' === message.messageId || 'console-preamble' === message.messageId) message.logLevel = ExtractorLogLevel.None;
                }
            });
            if (!extractorResult.succeeded) throw new Error(`API Extractor error. ${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].gray(`(${name})`)}`);
            await (0, __WEBPACK_EXTERNAL_MODULE__utils_js_d88b7fe1__.addBannerAndFooter)(untrimmedFilePath, banner, footer);
            __WEBPACK_EXTERNAL_MODULE__rsbuild_core_1b356efc__.logger.ready(`declaration files bundled successfully: ${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].cyan((0, __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.relative)(cwd, untrimmedFilePath))} in ${(0, __WEBPACK_EXTERNAL_MODULE__utils_js_d88b7fe1__.getTimeCost)(start)} ${__WEBPACK_EXTERNAL_MODULE_picocolors__["default"].gray(`(${name})`)}`);
        }));
    } catch (e) {
        throw new Error(`${logPrefixApiExtractor} ${e}`);
    }
}
export { bundleDts };
